name: Validate Ansible Playbooks

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ansible/**'
      - '.github/workflows/validate-ansible.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'ansible/**'
      - '.github/workflows/validate-ansible.yml'
  workflow_dispatch:

jobs:
  lint:
    name: Lint Ansible Code
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ansible ansible-lint yamllint

    - name: Run yamllint
      run: yamllint -c ansible/.yamllint.yml ansible/

    - name: Run ansible-lint
      run: ansible-lint ansible/

    - name: Check Ansible syntax
      run: |
        # Check cloud deployment syntax
        ansible-playbook --syntax-check ansible/site.yml -i ansible/inventories/production/
        
        # Check local environment syntax
        ansible-playbook --syntax-check ansible/playbooks/local-environments.yml -i ansible/inventories/local/hosts.ini

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov security scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ansible/
        framework: ansible
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

  validate-inventories:
    name: Validate Inventories
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible

    - name: Validate production inventory
      run: |
        ansible-inventory -i ansible/inventories/production/hosts --list > /dev/null
        echo "‚úÖ Production inventory is valid"

    - name: Validate local inventory
      run: |
        ansible-inventory -i ansible/inventories/local/hosts.ini --list > /dev/null
        echo "‚úÖ Local inventory is valid"

    - name: Check inventory variables
      run: |
        # Check for required variables in production
        ansible-inventory -i ansible/inventories/production/hosts --list | jq '.all.vars' | grep -q 'azure_location'
        echo "‚úÖ Azure location configured"
        
        # Check local inventory groups
        ansible-inventory -i ansible/inventories/local/hosts.ini --list | jq '.all.children' | grep -q 'env_obs_station'
        echo "‚úÖ Local environment groups configured"

  validate-structure:
    name: Validate Project Structure
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check required files exist
      run: |
        # Core playbooks
        test -f ansible/site.yml || { echo "‚ùå site.yml missing"; exit 1; }
        test -f ansible/playbooks/infrastructure.yml || { echo "‚ùå infrastructure.yml missing"; exit 1; }
        test -f ansible/playbooks/containers.yml || { echo "‚ùå containers.yml missing"; exit 1; }
        test -f ansible/playbooks/virtual-machines.yml || { echo "‚ùå virtual-machines.yml missing"; exit 1; }
        test -f ansible/playbooks/local-environments.yml || { echo "‚ùå local-environments.yml missing"; exit 1; }
        test -f ansible/playbooks/teardown.yml || { echo "‚ùå teardown.yml missing"; exit 1; }
        
        # Environment-specific tasks
        test -f ansible/tasks/obs-station-config.yml || { echo "‚ùå obs-station-config.yml missing"; exit 1; }
        test -f ansible/tasks/audio-workstation-config.yml || { echo "‚ùå audio-workstation-config.yml missing"; exit 1; }
        test -f ansible/tasks/video-capture-config.yml || { echo "‚ùå video-capture-config.yml missing"; exit 1; }
        
        # Inventories
        test -f ansible/inventories/production/hosts || { echo "‚ùå production inventory missing"; exit 1; }
        test -f ansible/inventories/local/hosts.ini || { echo "‚ùå local inventory missing"; exit 1; }
        
        echo "‚úÖ All required files present"

    - name: Validate directory structure
      run: |
        # Check directory structure
        test -d ansible/playbooks || { echo "‚ùå playbooks directory missing"; exit 1; }
        test -d ansible/tasks || { echo "‚ùå tasks directory missing"; exit 1; }
        test -d ansible/templates || { echo "‚ùå templates directory missing"; exit 1; }
        test -d ansible/inventories/production || { echo "‚ùå production inventory directory missing"; exit 1; }
        test -d ansible/inventories/local || { echo "‚ùå local inventory directory missing"; exit 1; }
        
        echo "‚úÖ Directory structure is correct"

  documentation-check:
    name: Check Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check README completeness
      run: |
        # Check if README exists and contains key sections
        test -f ansible/README.md || { echo "‚ùå ansible/README.md missing"; exit 1; }
        
        # Check for required sections
        grep -q "Local Environment Management" ansible/README.md || { echo "‚ùå Local Environment Management section missing"; exit 1; }
        grep -q "Compute-Node-Centric Design" ansible/README.md || { echo "‚ùå Design section missing"; exit 1; }
        grep -q "Quick Start" ansible/README.md || { echo "‚ùå Quick Start section missing"; exit 1; }
        
        echo "‚úÖ Documentation is complete"

    - name: Check for inline documentation
      run: |
        # Check that playbooks have proper headers
        for playbook in ansible/playbooks/*.yml; do
          if ! grep -q "# ====" "$playbook"; then
            echo "‚ùå $playbook missing documentation header"
            exit 1
          fi
        done
        
        echo "‚úÖ All playbooks have documentation headers"

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [lint, security-scan, validate-inventories, validate-structure, documentation-check]
    if: always()
    steps:
    - name: Success Summary
      if: needs.lint.result == 'success' && needs.validate-inventories.result == 'success' && needs.validate-structure.result == 'success' && needs.documentation-check.result == 'success'
      run: |
        echo "üéâ All validations passed!"
        echo "‚úÖ Ansible syntax and linting"
        echo "‚úÖ Security scanning"
        echo "‚úÖ Inventory validation"
        echo "‚úÖ Project structure"
        echo "‚úÖ Documentation"
        echo ""
        echo "Ready for deployment! üöÄ"

    - name: Failure Summary
      if: needs.lint.result == 'failure' || needs.validate-inventories.result == 'failure' || needs.validate-structure.result == 'failure' || needs.documentation-check.result == 'failure'
      run: |
        echo "‚ùå Some validations failed!"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Security: ${{ needs.security-scan.result }}"
        echo "Inventories: ${{ needs.validate-inventories.result }}"
        echo "Structure: ${{ needs.validate-structure.result }}"
        echo "Documentation: ${{ needs.documentation-check.result }}"
        echo ""
        echo "Please fix the issues before deployment."
        exit 1 