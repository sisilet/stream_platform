name: Deploy Streaming Infrastructure

on:
  workflow_dispatch:
    inputs:
      event_name:
        description: 'Event name for deployment'
        required: true
        default: 'streaming-event'
      azure_location:
        description: 'Azure location'
        required: false
        default: 'East US'
      youtube_keys:
        description: 'YouTube RTMP keys (comma-separated)'
        required: false
        default: ''
      deployment_type:
        description: 'Deployment type'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - infrastructure
        - containers
        - vms

env:
  ANSIBLE_HOST_KEY_CHECKING: False
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_SECRET: ${{ secrets.AZURE_SECRET }}

jobs:
  validate:
    name: Validate Ansible Playbooks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Ansible and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ansible[azure] ansible-lint yamllint

    - name: Lint Ansible playbooks
      run: |
        ansible-lint ansible/
        yamllint ansible/

    - name: Validate playbook syntax
      run: |
        ansible-playbook --syntax-check ansible/site.yml -i ansible/inventories/production/

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      resource_group: ${{ steps.deployment.outputs.resource_group }}
      deployment_url: ${{ steps.deployment.outputs.deployment_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Ansible and Azure dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ansible[azure]
        ansible-galaxy collection install azure.azcollection --force

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy streaming infrastructure
      id: deployment
      run: |
        cd ansible
        
        # Set deployment tags based on type
        case "${{ github.event.inputs.deployment_type }}" in
          "infrastructure")
            TAGS="--tags infrastructure"
            ;;
          "containers")
            TAGS="--tags infrastructure,containers"
            ;;
          "vms")
            TAGS="--tags infrastructure,vms"
            ;;
          "full")
            TAGS="--tags cloud"
            ;;
        esac
        
        # Run deployment
        ansible-playbook -i inventories/production site.yml $TAGS \
          --extra-vars "event_name=${{ github.event.inputs.event_name }}" \
          --extra-vars "azure_location=${{ github.event.inputs.azure_location }}" \
          --extra-vars "youtube_keys=${{ github.event.inputs.youtube_keys }}" \
          -v
        
        # Extract resource group for outputs
        RESOURCE_GROUP="streaming-${{ github.event.inputs.event_name }}-$(date +%s)"
        echo "resource_group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
        echo "deployment_url=https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/$RESOURCE_GROUP" >> $GITHUB_OUTPUT

    - name: Post deployment validation
      run: |
        cd ansible
        ansible-playbook -i inventories/production site.yml --tags validate \
          --extra-vars "event_name=${{ github.event.inputs.event_name }}" \
          --extra-vars "azure_location=${{ github.event.inputs.azure_location }}"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: always()
    steps:
    - name: Deployment Success Notification
      if: needs.deploy.result == 'success'
      run: |
        echo "üöÄ Deployment successful!"
        echo "Event: ${{ github.event.inputs.event_name }}"
        echo "Resource Group: ${{ needs.deploy.outputs.resource_group }}"
        echo "Azure Portal: ${{ needs.deploy.outputs.deployment_url }}"
        echo "Deployment Type: ${{ github.event.inputs.deployment_type }}"

    - name: Deployment Failure Notification
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs for details."
        exit 1 