name: Build and Push Container Images

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'containers/**'
      - '.github/workflows/build-containers.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'containers/**'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:
  detect-changes:
    name: Detect Container Changes
    runs-on: ubuntu-latest
    outputs:
      srt-relay: ${{ steps.changes.outputs.srt-relay }}
      slide-splitter: ${{ steps.changes.outputs.slide-splitter }}
      matrix: ${{ steps.changes.outputs.matrix }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changes
      id: changes
      run: |
        # Check if containers directory exists
        if [ ! -d "containers" ]; then
          echo "No containers directory found"
          echo "srt-relay=false" >> $GITHUB_OUTPUT
          echo "slide-splitter=false" >> $GITHUB_OUTPUT
          echo "matrix=[]" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # For workflow_dispatch with force_rebuild, build all
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
          echo "Force rebuild requested"
          echo "srt-relay=true" >> $GITHUB_OUTPUT
          echo "slide-splitter=true" >> $GITHUB_OUTPUT
          echo 'matrix=["srt-relay","slide-splitter"]' >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # For push events, check what changed
        if [ "${{ github.event_name }}" = "push" ]; then
          # Check if we have a valid before SHA
          BEFORE_SHA="${{ github.event.before }}"
          if [ "$BEFORE_SHA" = "0000000000000000000000000000000000000000" ] || [ -z "$BEFORE_SHA" ]; then
            # This is either the first commit or a force push - build all containers
            echo "No valid previous commit found (first push or force push)"
            echo "srt-relay=true" >> $GITHUB_OUTPUT
            echo "slide-splitter=true" >> $GITHUB_OUTPUT
            echo 'matrix=["srt-relay","slide-splitter"]' >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Use HEAD~1 as fallback if before SHA is still invalid
          if ! git cat-file -e "$BEFORE_SHA" 2>/dev/null; then
            echo "Before SHA not found in repository, using HEAD~1 as fallback"
            if git cat-file -e HEAD~1 2>/dev/null; then
              BEFORE_SHA="HEAD~1"
            else
              # Only one commit exists, build all
              echo "Only one commit exists, building all containers"
              echo "srt-relay=true" >> $GITHUB_OUTPUT
              echo "slide-splitter=true" >> $GITHUB_OUTPUT
              echo 'matrix=["srt-relay","slide-splitter"]' >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          CHANGED_FILES=$(git diff --name-only "$BEFORE_SHA" ${{ github.sha }})
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...${{ github.sha }})
        else
          # Default to building all on main branch
          echo "srt-relay=true" >> $GITHUB_OUTPUT
          echo "slide-splitter=true" >> $GITHUB_OUTPUT
          echo 'matrix=["srt-relay","slide-splitter"]' >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Check for changes in specific containers
        SRT_RELAY_CHANGED="false"
        SLIDE_SPLITTER_CHANGED="false"
        MATRIX="[]"
        
        if echo "$CHANGED_FILES" | grep -q "containers/srt-relay/"; then
          SRT_RELAY_CHANGED="true"
        fi
        
        if echo "$CHANGED_FILES" | grep -q "containers/slide-splitter/"; then
          SLIDE_SPLITTER_CHANGED="true"
        fi
        
        # Build matrix
        if [ "$SRT_RELAY_CHANGED" = "true" ] && [ "$SLIDE_SPLITTER_CHANGED" = "true" ]; then
          MATRIX='["srt-relay","slide-splitter"]'
        elif [ "$SRT_RELAY_CHANGED" = "true" ]; then
          MATRIX='["srt-relay"]'
        elif [ "$SLIDE_SPLITTER_CHANGED" = "true" ]; then
          MATRIX='["slide-splitter"]'
        fi
        
        echo "srt-relay=$SRT_RELAY_CHANGED" >> $GITHUB_OUTPUT
        echo "slide-splitter=$SLIDE_SPLITTER_CHANGED" >> $GITHUB_OUTPUT
        echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
        
        echo "Changes detected:"
        echo "SRT Relay: $SRT_RELAY_CHANGED"
        echo "Slide Splitter: $SLIDE_SPLITTER_CHANGED"
        echo "Matrix: $MATRIX"

  build-containers:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.matrix != '[]'
    strategy:
      matrix:
        container: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check if container directory exists
      run: |
        if [ ! -d "containers/${{ matrix.container }}" ]; then
          echo "❌ Container directory containers/${{ matrix.container }} not found"
          echo "Creating placeholder structure for future development"
          mkdir -p containers/${{ matrix.container }}
          cat > containers/${{ matrix.container }}/Dockerfile << 'EOF'
        # Placeholder Dockerfile for ${{ matrix.container }}
        FROM alpine:latest
        RUN echo "This is a placeholder for ${{ matrix.container }}"
        CMD ["echo", "Container ${{ matrix.container }} placeholder"]
        EOF
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ env.REGISTRY_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.container }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push container image
      uses: docker/build-push-action@v5
      with:
        context: containers/${{ matrix.container }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate container summary
      run: |
        echo "## 📦 Container Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Container:** ${{ matrix.container }}" >> $GITHUB_STEP_SUMMARY
        echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image URL:** ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.container }}" >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: Security Scan Container Images
    runs-on: ubuntu-latest
    needs: [detect-changes, build-containers]
    if: needs.detect-changes.outputs.matrix != '[]'
    strategy:
      matrix:
        container: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.container }}:latest
        format: 'sarif'
        output: 'trivy-results-${{ matrix.container }}.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.container }}.sarif'

  update-ansible-vars:
    name: Update Ansible Variables
    runs-on: ubuntu-latest
    needs: [detect-changes, build-containers]
    if: needs.detect-changes.outputs.matrix != '[]' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update container image tags in Ansible
      run: |
        # Update image tags in Ansible inventory
        COMMIT_SHA="${{ github.sha }}"
        SHORT_SHA=${COMMIT_SHA:0:7}
        
        # Update production inventory with new image tags
        if [ -f "ansible/inventories/production/hosts" ]; then
          # Add or update container image variables
          if grep -q "container_image_tag" ansible/inventories/production/hosts; then
            sed -i "s/container_image_tag=.*/container_image_tag=main-${SHORT_SHA}/" ansible/inventories/production/hosts
          else
            echo "container_image_tag=main-${SHORT_SHA}" >> ansible/inventories/production/hosts
          fi
          
          echo "Updated Ansible inventory with new container tags"
        fi

    - name: Commit updated Ansible variables
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --exit-code ansible/inventories/production/hosts; then
          echo "No changes to commit"
        else
          git add ansible/inventories/production/hosts
          git commit -m "Auto-update container image tags to ${{ github.sha }}"
          git push
        fi

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, build-containers, security-scan, update-ansible-vars]
    if: always()
    steps:
    - name: Build Success Summary
      if: needs.build-containers.result == 'success'
      run: |
        echo "🎉 Container build completed successfully!"
        echo "Built containers: ${{ needs.detect-changes.outputs.matrix }}"
        echo "Registry: ${{ env.REGISTRY }}/${{ github.repository }}"
        echo "Ready for deployment! 🚀"

    - name: Build Failure Summary
      if: needs.build-containers.result == 'failure'
      run: |
        echo "❌ Container build failed!"
        echo "Check the logs for details."
        exit 1

    - name: No Changes Summary
      if: needs.detect-changes.outputs.matrix == '[]'
      run: |
        echo "ℹ️ No container changes detected"
        echo "Skipping container builds." 