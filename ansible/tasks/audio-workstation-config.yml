---
# ============================================================================
# AUDIO WORKSTATION SPECIFIC CONFIGURATION TASKS
# ============================================================================
# Tasks specific to audio mixing/mastering workstations
# Included by local-environments.yml when env_audio_workstation group is
# detected

- name: "🎵 Audio Workstation Configuration"
  ansible.builtin.debug:
    msg: "Configuring Audio Workstation: {{ inventory_hostname }}"

# Windows Audio Workstation Configuration
- name: Windows Audio Workstation Block
  when: ansible_os_family == "Windows"
  block:
    - name: Install professional audio software
      chocolatey.chocolatey.win_chocolatey:
        name: "{{ item }}"
        state: present
      loop:
        - audacity
        - reaper
        - voicemeeter
      ignore_errors: true

    - name: Configure Windows audio for low-latency
      ansible.windows.win_shell: |
        # Set audio buffer size for professional work
        $audioKey = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Audio"
        if (Test-Path $audioKey) {
          New-ItemProperty -Path $audioKey -Name "DisableProtectedAudioDG" `
            -Value 1 -PropertyType DWORD -Force -ErrorAction SilentlyContinue
        }
        # Set multimedia class scheduler
        $mmcssKey = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile"
        if (Test-Path $mmcssKey) {
          Set-ItemProperty -Path $mmcssKey -Name "SystemResponsiveness" -Value 1 -ErrorAction SilentlyContinue
        }
      changed_when: true

    - name: Install ASIO drivers
      chocolatey.chocolatey.win_chocolatey:
        name: asio4all
        state: present
      ignore_errors: true

    - name: Configure audio interface settings
      ansible.windows.win_shell: |
        # Set exclusive mode for audio devices
        $audioDevices = Get-WmiObject -Class Win32_SoundDevice | Where-Object {$_.Status -eq "OK"}
        if ($audioDevices) {
          Write-Host "Found $($audioDevices.Count) audio devices configured for workstation use"
        }
      changed_when: false

    - name: Create audio workstation shortcuts
      ansible.windows.win_copy:
        content: |
          @echo off
          echo Starting Audio Workstation...
          start "" "C:\Program Files\REAPER (x64)\reaper.exe" 2>nul
          start "" "C:\Program Files (x86)\VoiceMeeter\voicemeeter8x64.exe" 2>nul
          echo Audio workstation applications started
        dest: "C:\\Users\\{{ ansible_user }}\\Desktop\\Start-Audio-Workstation.bat"

  rescue:
    - name: Handle Windows audio workstation configuration errors
      ansible.builtin.debug:
        msg:
          - "⚠️  Windows audio workstation configuration encountered errors"
          - "This may be due to missing Chocolatey or insufficient permissions"
          - "Please run as administrator and ensure Chocolatey is installed"

  always:
    - name: Log Windows audio workstation configuration attempt
      ansible.builtin.debug:
        msg: "Windows audio workstation configuration attempt completed"

# macOS Audio Workstation Configuration
- name: MacOS Audio Workstation Block
  when: ansible_os_family == "Darwin"
  block:
    - name: Install professional audio software via Homebrew
      community.general.homebrew_cask:
        name: "{{ item }}"
        state: present
      loop:
        - audacity
        - logic-pro
        - soundflower
      ignore_errors: true

    - name: Install command line audio tools
      community.general.homebrew:
        name: "{{ item }}"
        state: present
      loop:
        - sox
        - lame
        - flac
        - ffmpeg

    - name: Configure Core Audio settings
      ansible.builtin.shell: |
        # Set audio sample rate to 48kHz for professional work
        sudo defaults write /Library/Preferences/Audio\ MIDI\ Setup \
          com.apple.audio.aggregate.sample-rate -int 48000
        # Enable exclusive mode
        defaults write com.apple.coreaudio "Exclusive Mode" -bool true
        # Set buffer size for low latency
        defaults write com.apple.audio.CoreAudio "DefaultIOBufferDuration" -float 0.005
      changed_when: true

    - name: Create audio project directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "~/Documents/Audio Projects"
        - "~/Documents/Audio Projects/Sessions"
        - "~/Documents/Audio Projects/Exports"

  rescue:
    - name: Handle macOS audio workstation configuration errors
      ansible.builtin.debug:
        msg:
          - "⚠️  macOS audio workstation configuration encountered errors"
          - "This may be due to missing Homebrew or App Store authentication"
          - "Please ensure Homebrew is installed and App Store is authenticated"

  always:
    - name: Log macOS audio workstation configuration attempt
      ansible.builtin.debug:
        msg: "macOS audio workstation configuration attempt completed"

# Linux Audio Workstation Configuration
- name: Linux Audio Workstation Block
  when: ansible_os_family in ["Debian", "RedHat"]
  block:
    - name: Install JACK audio system
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop:
        - jackd2
        - qjackctl
        - audacity
        - ffmpeg
        - sox

    - name: Configure JACK for low-latency audio
      ansible.builtin.copy:
        content: |
          # JACK configuration for low-latency audio
          /usr/bin/jackd -R -P75 -dalsa -dhw:0 -r48000 -p128 -n2
        dest: "/etc/jack/jackdrc"
        mode: '0644'
      become: true

    - name: Add user to audio group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: audio
        append: true
      become: true

    - name: Configure real-time audio limits
      ansible.builtin.copy:
        content: |
          @audio   -  rtprio     99
          @audio   -  memlock    unlimited
          @audio   -  nice       -19
        dest: "/etc/security/limits.d/audio.conf"
        mode: '0644'
      become: true

  rescue:
    - name: Handle Linux audio workstation configuration errors
      ansible.builtin.debug:
        msg:
          - "⚠️  Linux audio workstation configuration encountered errors"
          - "This may be due to missing sudo privileges or package repositories"
          - "Please ensure you have sudo access and package manager is configured"

  always:
    - name: Log Linux audio workstation configuration attempt
      ansible.builtin.debug:
        msg: "Linux audio workstation configuration attempt completed"

# Audio Hardware Detection and Validation
- name: Detect audio hardware
  ansible.builtin.debug:
    msg: "Audio interfaces will be detected based on OS"

- name: Windows audio device detection
  ansible.windows.win_shell: |
    Get-WmiObject -Class Win32_SoundDevice | Select-Object Name, Status | ConvertTo-Json
  register: windows_audio_devices
  when: ansible_os_family == "Windows"
  changed_when: false

- name: MacOS audio device detection
  ansible.builtin.shell: system_profiler SPAudioDataType -json  # noqa: command-instead-of-shell
  register: macos_audio_devices
  when: ansible_os_family == "Darwin"
  changed_when: false

- name: Linux audio device detection
  ansible.builtin.shell: |
    if command -v aplay >/dev/null 2>&1; then
      aplay -l 2>/dev/null || echo "No audio devices found"
    else
      echo "ALSA tools not installed"
    fi
  register: linux_audio_devices
  when: ansible_os_family in ["Debian", "RedHat"]
  changed_when: false

- name: Display detected audio devices
  ansible.builtin.debug:
    var: "{{ ansible_os_family | lower }}_audio_devices.stdout"
  when: ansible_os_family in ["Windows", "Darwin", "Debian", "RedHat"]

- name: Validate audio configuration
  ansible.builtin.assert:
    that:
      - ansible_processor_cores >= 2
      - ansible_memory_mb.real.total >= 4096
    fail_msg: >
      System does not meet minimum requirements for audio workstation
      (2 cores, 4GB RAM)
    success_msg: "System meets audio workstation requirements"

- name: Display audio configuration summary
  ansible.builtin.debug:
    msg:
      - "Audio workstation configuration completed"
      - "OS: {{ ansible_os_family }}"
      - "Hostname: {{ inventory_hostname }}"

- name: Windows audio test
  ansible.windows.win_shell: |
    # Test Windows audio subsystem
    Get-WmiObject -Class Win32_SoundDevice |
    Where-Object {$_.Status -eq "OK"} |
    Measure-Object |
    Select-Object -ExpandProperty Count
  register: windows_audio_test
  when: ansible_os_family == "Windows"
  changed_when: false

- name: Display Windows audio test results
  ansible.builtin.debug:
    msg: "Working audio devices: {{ windows_audio_test.stdout | trim }}"
  when: ansible_os_family == "Windows"
