---
# ============================================================================
# OBS STATION SPECIFIC CONFIGURATION TASKS
# ============================================================================
# Tasks specific to OBS operator stations
# Included by local-environments.yml when env_obs_station group is detected

- name: "🎬 OBS Station Configuration"
  ansible.builtin.debug:
    msg: "Configuring OBS Station: {{ inventory_hostname }}"

# Windows OBS Station Configuration
- name: Windows OBS Station Block
  when: ansible_os_family == "Windows"
  block:
    - name: Check OBS Studio installation directory
      ansible.windows.win_stat:
        path: "C:\\Program Files\\obs-studio\\bin\\64bit\\obs64.exe"
      register: obs_exe_check

    - name: Install OBS Studio via Chocolatey
      chocolatey.chocolatey.win_chocolatey:
        name: obs-studio
        state: present
      when: not obs_exe_check.stat.exists

    - name: Create OBS configuration directory
      ansible.windows.win_file:
        path: "C:\\Users\\{{ ansible_user }}\\AppData\\Roaming\\obs-studio\\basic"
        state: directory

    - name: Configure OBS basic settings
      ansible.windows.win_copy:
        content: |
          {
            "General": {
              "EnableAutoUpdates": false,
              "OpenStatsOnStartup": false,
              "RecordWhenStreaming": true
            },
            "Video": {
              "BaseCX": 1920,
              "BaseCY": 1080,
              "OutputCX": 1920,
              "OutputCY": 1080,
              "FPSType": 0,
              "FPSCommon": "30"
            },
            "Audio": {
              "SampleRate": 48000,
              "ChannelSetup": "Stereo"
            }
          }
        dest: >
          C:\Users\{{ ansible_user }}\AppData\Roaming\obs-studio\basic\basic.ini
        force: false

    - name: Configure Windows audio for streaming
      ansible.windows.win_shell: |
        # Set exclusive mode for audio devices
        $audioDevices = Get-WmiObject -Class Win32_SoundDevice | Where-Object {$_.Status -eq "OK"}
        if ($audioDevices) {
          Write-Host "Found $($audioDevices.Count) audio devices"
          # Configure for low-latency streaming
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\AudioSrv" `
            -Name "DependOnService" -Value @("AudioEndpointBuilder","Audiosrv")
        }
      changed_when: false

    - name: Install additional streaming tools
      chocolatey.chocolatey.win_chocolatey:
        name: "{{ item }}"
        state: present
      loop:
        - vlc
        - ffmpeg
      ignore_errors: true

    - name: Test OBS installation
      ansible.windows.win_command: >
        "C:\Program Files\obs-studio\bin\64bit\obs64.exe" --help
      register: obs_test
      failed_when: false
      changed_when: false

    - name: Create OBS startup script
      ansible.windows.win_copy:
        content: |
          @echo off
          echo Starting OBS Studio...
          cd "C:\Program Files\obs-studio\bin\64bit"
          start obs64.exe --minimize-to-tray
          echo OBS Studio started successfully
        dest: "C:\\Users\\{{ ansible_user }}\\Desktop\\Start-OBS.bat"

    - name: Set OBS to start with Windows
      ansible.windows.win_regedit:
        path: HKCU:\Software\Microsoft\Windows\CurrentVersion\Run
        name: "OBS Studio"
        data: "C:\\Users\\{{ ansible_user }}\\Desktop\\Start-OBS.bat"
        type: string
      ignore_errors: true

  rescue:
    - name: Handle OBS configuration errors
      ansible.builtin.debug:
        msg:
          - "⚠️  Windows OBS configuration encountered errors"
          - "This may be due to missing dependencies or permissions"
          - "Please check Windows user permissions and try manual installation"

  always:
    - name: Log OBS configuration attempt
      ansible.builtin.debug:
        msg: "Windows OBS configuration attempt completed"

# macOS OBS Station Configuration
- name: MacOS OBS Station Block
  when: ansible_os_family == "Darwin"
  block:
    - name: Check OBS installation
      ansible.builtin.stat:
        path: "/Applications/OBS.app/Contents/MacOS/OBS"
      register: obs_macos_check

    - name: Install OBS via Homebrew
      community.general.homebrew_cask:
        name: obs
        state: present
      when: not obs_macos_check.stat.exists

    - name: Configure OBS profiles directory
      ansible.builtin.file:
        path: "~/Library/Application Support/obs-studio/basic/profiles/Streaming"
        state: directory
        mode: '0755'

    - name: Set macOS audio preferences for OBS
      ansible.builtin.shell: |
        # Set audio sample rate to 48kHz
        sudo defaults write /Library/Preferences/Audio\ MIDI\ Setup \
          com.apple.audio.aggregate.sample-rate -int 48000

        # Enable exclusive mode for audio devices
        defaults write com.apple.coreaudio "Exclusive Mode" -bool true
      changed_when: true

  rescue:
    - name: Handle macOS OBS configuration errors
      ansible.builtin.debug:
        msg:
          - "⚠️  macOS OBS configuration encountered errors"
          - "This may be due to missing Homebrew or permissions"
          - "Please ensure Homebrew is installed and accessible"

  always:
    - name: Log OBS configuration attempt
      ansible.builtin.debug:
        msg: "macOS OBS configuration attempt completed"

# Performance validation
- name: Check system performance for OBS
  ansible.builtin.debug:
    msg:
      - "CPU Cores: {{ ansible_processor_cores }}"
      - "RAM: {{ ansible_memory_mb.real.total }} MB"
      - "Free RAM: {{ ansible_memory_mb.real.free }} MB"

- name: Validate minimum requirements for OBS
  ansible.builtin.assert:
    that:
      - ansible_processor_cores >= 4
      - ansible_memory_mb.real.total >= 8192
    fail_msg: "System does not meet minimum requirements for OBS (4 cores, 8GB RAM)"
    success_msg: "System meets OBS requirements"

- name: Test network connectivity for streaming
  ansible.builtin.uri:
    url: "https://ingest.rtmp.youtube.com"
    method: HEAD
    timeout: 10
  register: youtube_connectivity
  failed_when: false

- name: Display network test results
  ansible.builtin.debug:
    msg:
      - "YouTube RTMP connectivity: {{ 'OK' if youtube_connectivity.status == 200 else 'FAILED' }}"
      - "Response time: {{ youtube_connectivity.elapsed if youtube_connectivity.elapsed is defined else 'N/A' }}s"
