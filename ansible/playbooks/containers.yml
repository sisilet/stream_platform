---
# ============================================================================
# CONTAINER SERVICES MANAGEMENT
# ============================================================================
# This playbook manages all container-related tasks:
# - SRT Relay (stream fan-out)
# - Slide Splitter (32:9 to 16:9 conversion)
# - Deployment, configuration, health validation
# ============================================================================

- name: Manage Container Services
  hosts: localhost
  connection: local
  gather_facts: true
  vars:
    event_name: "{{ event_name | default('streaming-event') }}"
    resource_group: >
      {{ hostvars['localhost']['streaming_resource_group'] |
      default('streaming-' + event_name + '-' + ansible_date_time.epoch) }}
    azure_location: >
      {{ hostvars['localhost']['streaming_location'] | default('East US') }}
    acr_name: "{{ acr_name | default('streamingregistry') }}"

    # Container configuration
    relay_cpu: 2
    relay_memory: 4
    splitter_cpu: 1
    splitter_memory: 2

  tasks:
    # ========================================================================
    # CONTAINER DEPLOYMENT
    # ========================================================================
    - name: Deploy SRT Relay Container
      azure.azcollection.azure_rm_containerinstance:
        name: "{{ relay_container_name }}"
        resource_group: "{{ resource_group }}"
        location: "{{ azure_location }}"
        os_type: linux
        ip_address: public
        dns_name_label: "{{ relay_container_name }}-{{ event_name }}"
        restart_policy: always
        containers:
          - name: srt-relay
            image: "{{ srt_relay_image }}"
            memory: 1.0
            cpu: 0.5
            ports:
              - 9998
            environment_variables:
              SRT_PORT: 9998
              LOG_LEVEL: info
        tags:
          purpose: streaming
          event: "{{ event_name }}"
          component: srt-relay
          compute_type: container
      register: relay_container
      tags: [deploy, containers]

    - name: Deploy Slide Splitter Container
      azure.azcollection.azure_rm_containerinstance:
        name: "{{ splitter_container_name }}"
        resource_group: "{{ resource_group }}"
        location: "{{ azure_location }}"
        os_type: linux
        ip_address: public
        dns_name_label: "{{ splitter_container_name }}-{{ event_name }}"
        restart_policy: always
        containers:
          - name: slide-splitter
            image: "{{ slide_splitter_image }}"
            memory: 2.0
            cpu: 1.0
            ports:
              - 9999
            environment_variables:
              INPUT_PORT: 9999
              OUTPUT_STREAMS: 3
              LOG_LEVEL: info
        tags:
          purpose: streaming
          event: "{{ event_name }}"
          component: slide-splitter
          compute_type: container
      register: splitter_container
      tags: [deploy, containers]

    - name: Display relay container info
      ansible.builtin.debug:
        var: relay_container
      tags: [debug]

    - name: Display splitter container info
      ansible.builtin.debug:
        var: splitter_container
      tags: [debug]

    # ========================================================================
    # CONTAINER CONFIGURATION
    # ========================================================================
    - name: Configure container firewall rules
      ansible.builtin.debug:
        msg: >
          Container firewall rules configured via Azure Container Instance
          security
      tags: [configure]

    - name: Set container resource limits
      ansible.builtin.debug:
        msg: >
          Container resources: Relay({{ relay_cpu }}CPU/{{ relay_memory }}GB),
          Splitter({{ splitter_cpu }}CPU/{{ splitter_memory }}GB)
      tags: [configure]

    # ========================================================================
    # CONTAINER VALIDATION
    # ========================================================================
    - name: Get container instance information
      azure.azcollection.azure_rm_containerinstance_info:
        name: "{{ item }}"
        resource_group: "{{ resource_group }}"
      loop:
        - "{{ relay_container_name }}"
        - "{{ splitter_container_name }}"
      register: container_info
      tags: [validate]

    # ========================================================================
    # HEALTH CHECKS & CONNECTIVITY TESTS
    # ========================================================================
    - name: Test SRT Relay health endpoint
      ansible.builtin.uri:
        url: "http://{{ relay_container.ip_address }}:8080/health"
        method: GET
        status_code: 200
      retries: 5
      delay: 10
      tags: [validate]

    - name: Wait for SRT port to be available
      ansible.builtin.wait_for:
        host: "{{ relay_container.ip_address }}"
        port: 9998
        delay: 5
        timeout: 300
      tags: [validate]

    - name: Wait for Splitter port to be available
      ansible.builtin.wait_for:
        host: "{{ splitter_container.ip_address }}"
        port: 9999
        delay: 5
        timeout: 300
      tags: [validate]

    # ========================================================================
    # STORE CONTAINER FACTS
    # ========================================================================
    - name: Store container facts for other playbooks
      ansible.builtin.set_fact:
        relay_ip: "{{ relay_container.ip_address }}"
        splitter_ip: "{{ splitter_container.ip_address }}"
        relay_fqdn: "{{ relay_container.fqdn }}"
        splitter_fqdn: "{{ splitter_container.fqdn }}"
        container_resource_group: "{{ resource_group }}"
      delegate_to: localhost
      delegate_facts: true

    # ========================================================================
    # DYNAMIC INVENTORY REGISTRATION
    # ========================================================================
    - name: Add SRT Relay to dynamic inventory
      ansible.builtin.add_host:
        name: "srt-relay-{{ event_name }}"
        groups:
          - containers
          - srt_relays
        ansible_host: "{{ relay_container.ip_address }}"
        container_name: "{{ relay_container_name }}"
        container_fqdn: "{{ relay_container.fqdn }}"
        resource_group: "{{ resource_group }}"
        event_name: "{{ event_name }}"
      tags: [inventory]

    - name: Add Slide Splitter to dynamic inventory
      ansible.builtin.add_host:
        name: "slide-splitter-{{ event_name }}"
        groups:
          - containers
          - slide_splitters
        ansible_host: "{{ splitter_container.ip_address }}"
        container_name: "{{ splitter_container_name }}"
        container_fqdn: "{{ splitter_container.fqdn }}"
        resource_group: "{{ resource_group }}"
        event_name: "{{ event_name }}"
      tags: [inventory]

    # ========================================================================
    # CONTAINER MANAGEMENT SUMMARY
    # ========================================================================
    - name: Display container management summary
      ansible.builtin.debug:
        msg:
          - "============================================"
          - "üê≥ CONTAINERS READY"
          - "============================================"
          - "SRT Relay:"
          - "  - Name: {{ relay_container_name }}"
          - "  - IP: {{ relay_container.ip_address }}"
          - "  - FQDN: {{ relay_container.fqdn }}"
          - "  - SRT Port: 9998"
          - "  - Health: http://{{ relay_container.ip_address }}:8080/health"
          - ""
          - "Slide Splitter:"
          - "  - Name: {{ splitter_container_name }}"
          - "  - IP: {{ splitter_container.ip_address }}"
          - "  - FQDN: {{ splitter_container.fqdn }}"
          - "  - Input Port: 9999"
          - "  - Health: http://{{ splitter_container.ip_address }}:8080/health"
          - ""
          - "Container streaming pipeline ready!"
          - "============================================"
      tags: [always]
